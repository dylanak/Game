{
	"textures":
	{
	},
	"translations":
	{
	},
	"geometryBuilders":
	{
		"plane": "plane.json",
		"rectangular_prism": "rectangular_prism.json",
		"sphere": "sphere.json"
	},
	"controls":
	{
		"movement.horizontal": { "type": 2, "function": "return this.level.player.controlsLoopWrapped", "filters": { "gamepad": "return Gamepad.analogFilter" }, "controllers": { "gamepad": [ "analog0" ] } },
		"movement.backwards": { "type": 2, "function": "return this.level.player.controlsLoopWrapped", "filters": { "keyboard": "return Keyboard.keyFilter", "gamepad": "return Gamepad.buttonFilter" }, "controllers": { "keyboard": [ "s" ] } },
		"movement.forwards": { "type": 2, "function": "return this.level.player.controlsLoopWrapped", "filters": { "keyboard": "return Keyboard.keyFilter", "gamepad": "return Gamepad.buttonFilter" }, "controllers": { "keyboard": [ "w" ] } },
		"movement.leftwards": { "type": 2, "function": "return this.level.player.controlsLoopWrapped", "filters": { "keyboard": "return Keyboard.keyFilter", "gamepad": "return Gamepad.buttonFilter" }, "controllers": { "keyboard": [ "a" ] } },
		"movement.rightwards": { "type": 2, "function": "return this.level.player.controlsLoopWrapped", "filters": { "keyboard": "return Keyboard.keyFilter", "gamepad": "return Gamepad.buttonFilter" }, "controllers": { "keyboard": [ "d" ] } },
		"movement.downwards": { "type": 2, "function": "return this.level.player.controlsLoopWrapped", "filters": { "keyboard": "return Keyboard.keyFilter", "gamepad": "return Gamepad.buttonFilter" }, "controllers": { "keyboard": [ "shift" ], "gamepad": [ "button10" ] } },
		"movement.upwards": { "type": 2, "function": "return this.level.player.controlsLoopWrapped", "filters": { "keyboard": "return Keyboard.keyFilter", "gamepad": "return Gamepad.buttonFilter" }, "controllers": { "keyboard": [ "spacebar" ], "gamepad": [ "button0" ] } },
		"instalook.horizontal": { "type": 1, "function": "return wrapFunction(this.level.player.instantControls, this.level.player)", "filters": { "mouse": "return Mouse.movementFilter" }, "controllers": { "mouse": [ "movement" ] } },
		"look.horizontal": { "type": 2, "function": "return this.level.player.controlsLoopWrapped", "filters": { "gamepad": "return Gamepad.analogFilter" }, "controllers": { "gamepad": [ "analog1" ] } },
		"look.downwards": { "type": 2, "function": "return this.level.player.controlsLoopWrapped", "filters": { "keyboard": "return Keyboard.keyFilter", "gamepad": "return Gamepad.buttonFilter" }, "controllers": { "keyboard": [ "down" ] } },
		"look.upwards": { "type": 2, "function": "return this.level.player.controlsLoopWrapped", "filters": { "keyboard": "return Keyboard.keyFilter", "gamepad": "return Gamepad.buttonFilter" }, "controllers": { "keyboard": [ "up" ] } },
		"look.leftwards": { "type": 2, "function": "return this.level.player.controlsLoopWrapped", "filters": { "keyboard": "return Keyboard.keyFilter", "gamepad": "return Gamepad.buttonFilter" }, "controllers": { "keyboard": [ "left" ] } },
		"look.rightwards": { "type": 2, "function": "return this.level.player.controlsLoopWrapped", "filters": { "keyboard": "return Keyboard.keyFilter", "gamepad": "return Gamepad.buttonFilter" }, "controllers": { "keyboard": [ "right" ] } }
	},
	"shaders":
	{
		"default":
		{
			"canReformat":
			"return this.registeredMaterials != renderer.game.materials.length || this.registeredLayers != renderer.layers.length || renderer.layers.every(function layerDoesntHaveEqualLightsToRegistered(layer) { return layer.lights.length != this.registeredLights; }, this) || renderer.layers.some(function layerHasMoreLightsThanRegistered(layer) { return layer.lights.length > this.registeredLights; }, this);",
			"preFormat":
			"this.registeredMaterials = renderer.game.materials.length; this.registeredLayers = renderer.layers.length; this.registeredLights = 0; renderer.layers.forEach(function setRegisteredLightsToLightsIfGreater(layer) { this.registeredLights = Math.max(this.registeredLights, layer.lights.length); }, this);",
			"vertex":
			{
				"source": "default/vertex.txt",
				"format":
				"return raw.format(this.registeredMaterials, Math.max(this.registeredMaterials, 1), this.registeredLayers, Math.max(this.registeredLayers, 1), this.registeredLights, Math.max(this.registeredLights, 1));"
			},
			"fragment":
			{
				"source": "default/fragment.txt",
				"format":
				"return raw.format(this.registeredMaterials, Math.max(this.registeredMaterials, 1), this.registeredLayers, Math.max(this.registeredLayers, 1), this.registeredLights, Math.max(this.registeredLights, 1));"

			}
		}
	}
}