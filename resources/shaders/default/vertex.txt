precision highp float;
precision highp int;

struct Material
{
	float shininess;
	vec3 specularColor;
};
struct Light
{
	float ambience;
	float attenuation;
	vec3 position;
	vec3 direction;
	vec3 color;
	bool orthographic;
};
struct Layer
{
	vec4 overlayColor;
	mat4 viewMatrix;
	mat3 normalMatrix;
	int lightCount;
	Light lights[{5}];
};

attribute vec2 aLayerAndMaterial;
attribute vec4 aPosition;
attribute vec2 aTextureCoordinate;
attribute vec3 aNormalDirection;
attribute mat4 aVertexMatrix;

uniform int uRenderingLayer;
uniform Material uMaterials[{1}];
uniform Layer uLayers[{3}];

varying float vLayer;
varying highp vec3 vViewPosition;
varying highp vec3 vPosition;
varying highp vec2 vTextureCoordinate;
varying highp vec3 vTransformedNormal;
varying float vMaterialShininess;
varying highp vec3 vMaterialSpecularColor;

void main(void)
{
	if(1 == uRenderingLayer)
	{
		vViewPosition = vec3(uLayers[uRenderingLayer].viewMatrix[3]);
		vLayer = float(uRenderingLayer);
		vec4 position = uLayers[uRenderingLayer].viewMatrix * aVertexMatrix * aPosition;
		vPosition = vec3(position);
		gl_Position = position;
		vTextureCoordinate = aTextureCoordinate;
		vTransformedNormal = uLayers[uRenderingLayer].normalMatrix * aNormalDirection;
		Material material = uMaterials[int(aLayerAndMaterial[1])];
		vMaterialShininess = material.shininess;
		vMaterialSpecularColor = material.specularColor;
	}
}